#include "../headers/networking.h"
#include "../headers/common.h"
#include <sys/socket.h>
#include <strings.h> // bzero
#include <netinet/in.h> // sockaddr_in
#include <netdb.h>
#include <unistd.h> // fork
#include <arpa/inet.h>
#include <stdio.h>
#include <stdlib.h>
#include <err.h>

int startServer(struct config *configuration) {
	size_t sock, newsock, size, optval = 1;
	pid_t pid;
	struct sockaddr_storage *addr;
	struct addrinfo *old, *new, hint;

	sock = 0;
	// initialize IPv4 option
	bzero(&hint, sizeof (hint));
	hint.ai_family = AF_UNSPEC;
	hint.ai_socktype = SOCK_STREAM;
	hint.ai_flags = AI_PASSIVE;
	size = sizeof (addr);
	getaddrinfo(NULL, "1038", &hint, &new);

	for(old = new; new != NULL; new = new->ai_next){
		if ((sock = socket(new->ai_family, new->ai_socktype, new->ai_protocol)) == -1)
			err(1, "Problem occured while creating the socket.");
		if (setsockopt(sock, SOL_SOCKET, SO_REUSEADDR,
			&optval, sizeof (optval)) == -1)
			err(1, "Problem occured while creating the socket.");
		if (! bind(sock, new->ai_addr, new->ai_addrlen)) break;
	}
	if(!sock)
		return (0);
	freeaddrinfo(old);
	// lsiten (maximum possible number of connections in the queue)
	if (listen(sock, SOMAXCONN) == -1)
		err(1, "Problem occured while trying to listen.");

	// infinite accepting loop
	// O_NONBLOCK not set, so accept shall block while waiting for the peer
	for (;;) {
		if ((newsock = accept(sock,
			(struct sockaddr *) addr, &size)) == -1)
			err(1, "Accepting the connection failed.");
		switch (pid = fork()){
			// child
			case 0:
				runInstance(configuration, addr, newsock);
				exit(0);
			break;
			case -1:
				err(1, "Error while forking.");
			break;
			// parent
			default:
				logReport("Connection accepted");
			break;
		}
	}

	return (0);
}

int runInstance(struct config * configuration, struct sockaddr_storage *client_addr, int sock){
	char numeric_addr[INET6_ADDRSTRLEN];
	printf("%d, %s\n", AF_INET6, inet_ntop(((struct sockaddr_storage*)client_addr)->ss_family, &(((struct sockaddr_in6*)client_addr)->sin6_addr.s6_addr), numeric_addr, sizeof (numeric_addr)));
	//if(((struct sockaddr_storage *)client_addr)->ss_family == AF_INET)
		//printf("New client from %s\n", inet_ntop(((struct sockaddr_storage*)client_addr)->ss_family, ((struct sockaddr_in*)client_addr)->sin_addr.s_addr , numeric_addr, sizeof (numeric_addr)));
	return (0);
}